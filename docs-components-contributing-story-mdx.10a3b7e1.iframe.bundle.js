"use strict";(globalThis.webpackChunkgutenberg=globalThis.webpackChunkgutenberg||[]).push([[9244],{"./node_modules/@storybook/addon-docs/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{aT:()=>_blocks__WEBPACK_IMPORTED_MODULE_0__.AddContext,h_:()=>_blocks__WEBPACK_IMPORTED_MODULE_0__.Meta});var _blocks__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/blocks/index.js")},"./storybook/stories/docs/components/contributing.story.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>contributing_story});__webpack_require__("./node_modules/react/index.js");var esm=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js");function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={},MDXLayout="wrapper";function MDXContent({components,...props}){return(0,esm.kt)(MDXLayout,_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)("h1",{id:"contributing"},"Contributing"),(0,esm.kt)("p",null,"Thank you for taking the time to contribute."),(0,esm.kt)("p",null,"The following is a set of guidelines for contributing to the ",(0,esm.kt)("inlineCode",{parentName:"p"},"@wordpress/components")," package to be considered in addition to the general ones described in our ",(0,esm.kt)("a",{parentName:"p",href:"/CONTRIBUTING.md"},"Contributing Policy"),"."),(0,esm.kt)("p",null,"This set of guidelines should apply especially to newly introduced components. In fact, while these guidelines should also be retroactively applied to existing components, it is sometimes impossible to do so for legacy/compatibility reasons."),(0,esm.kt)("p",null,"For an example of a component that follows these requirements, take a look at ",(0,esm.kt)("a",{parentName:"p",href:"/packages/components/src/item-group"},(0,esm.kt)("inlineCode",{parentName:"a"},"ItemGroup")),"."),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#introducing-new-components"},"Introducing new components")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#compatibility"},"Compatibility")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#compound-components"},"Compound components")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#components--hooks"},"Components & Hooks")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#typescript"},"TypeScript")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#styling"},"Styling")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#context-system"},"Context system")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#unit-tests"},"Unit tests")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#storybook"},"Storybook")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#documentation"},"Documentation")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#README-example"},"README example")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#folder-structure"},"Folder structure")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#refactoring-a-component-to-typescript"},"TypeScript migration guide")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#using-radix-ui-primitives"},"Using Radix UI primitives"))),(0,esm.kt)("h2",{id:"introducing-new-components"},"Introducing new components"),(0,esm.kt)("h3",{id:"does-it-belong-in-the-component-library"},"Does it belong in the component library?"),(0,esm.kt)("p",null,"A component library should include components that are generic and flexible enough to work across a variety of products. It should include what’s shared across many products and omit what’s not."),(0,esm.kt)("p",null,"To determine if a component should be added, ask yourself:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Could this component be used by other products/plugins?"),(0,esm.kt)("li",{parentName:"ul"},"Does the new component overlap (in functionality or visual design) with any existing components?"),(0,esm.kt)("li",{parentName:"ul"},"How much effort will be required to make and maintain?"),(0,esm.kt)("li",{parentName:"ul"},"Is there a clear purpose for the component?")),(0,esm.kt)("p",null,"Here’s a flowchart that can help determine if a new component is necessary:"),(0,esm.kt)("p",null,(0,esm.kt)("a",{parentName:"p",href:"https://coggle.it/diagram/WtUSrld3uAYZHsn-/t/new-ui-component/992b38cbe685d897b4aec6d0dd93cc4b47c06e0d4484eeb0d7d9a47fb2c48d94",target:"_blank",rel:"nofollow noopener noreferrer"},(0,esm.kt)("img",{parentName:"a",src:"https://wordpress.org/gutenberg/files/2019/07/New_component_flowchart.png",alt:"New component flowchart"}))),(0,esm.kt)("h3",{id:"first-steps"},"First steps"),(0,esm.kt)("p",null,"If you have a component you'd like added or changed, start by opening a GitHub issue. Include a detailed description in which you:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Explain the rationale"),(0,esm.kt)("li",{parentName:"ul"},"Detail the intended behavior"),(0,esm.kt)("li",{parentName:"ul"},"Clarify whether it’s a variation of an existing component, or a new asset"),(0,esm.kt)("li",{parentName:"ul"},"Include mockups of any fidelity (optional)"),(0,esm.kt)("li",{parentName:"ul"},"Include any inspirations from other products (optional)")),(0,esm.kt)("p",null,"This issue will be used to discuss the proposed changes and track progress. Reviewers start by discussing the proposal to determine if it's appropriate for WordPress Components, or if there's overlap with an existing component."),(0,esm.kt)("p",null,"It’s encouraged to surface works-in-progress. If you’re not able to complete all of the parts yourself, someone in the community may be able to pick up where you left off."),(0,esm.kt)("h3",{id:"next-steps"},"Next steps"),(0,esm.kt)("p",null,"Once the team has discussed and approved the change, it's time to start implementing it."),(0,esm.kt)("ol",null,(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("strong",{parentName:"li"},"Provide a rationale"),": Explain how your component will add value to the system and the greater product ecosystem. Be sure to include any user experience and interaction descriptions."),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("strong",{parentName:"li"},"Draft documentation"),": New components need development, design, and accessibility guidelines. Additionally, if your change adds additional behavior or expands a component’s features, those changes will need to be fully documented as well. Read through existing component documentation for examples. Start with a rough draft, and reviewers will help polish documentation."),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("strong",{parentName:"li"},"Provide working code"),": The component or enhancement must be built in React. See the ",(0,esm.kt)("a",{parentName:"li",href:"https://github.com/WordPress/gutenberg/blob/HEAD/docs/contributors/code/README.md",target:"_blank",rel:"nofollow noopener noreferrer"},"developer contribution guidelines"),"."),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("strong",{parentName:"li"},"Create a design spec"),": Create sizing and styling annotations for all aspects of the component. This spec should provide a developer with everything they need to create the design in code. ",(0,esm.kt)("a",{parentName:"li",href:"https://help.figma.com/article/32-developer-handoff",target:"_blank",rel:"nofollow noopener noreferrer"},"Figma automatically does this for you"),".")),(0,esm.kt)("p",null,"Remember, it’s unlikely that all parts will be done by one person. Contribute where you can, and others will help."),(0,esm.kt)("h3",{id:"component-refinement"},"Component refinement"),(0,esm.kt)("p",null,"Before a component is published it will need to be fine-tuned:"),(0,esm.kt)("ol",null,(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("strong",{parentName:"li"},"Expand")," the features of the component to a minimum. Agree on what features should be included."),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("strong",{parentName:"li"},"Reduce")," scope and leave off features lacking consensus."),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("strong",{parentName:"li"},"Quality assurance"),": each contribution must adhere to system standards.")),(0,esm.kt)("h4",{id:"quality-assurance"},"Quality assurance"),(0,esm.kt)("p",null,"To ensure quality, each component should be tested. The testing process should be done during the development of the component and before the component is published."),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Accessibility"),": Has the design and implementation accounted for accessibility? Please use the ",(0,esm.kt)("a",{parentName:"li",href:"https://make.wordpress.org/accessibility/handbook/best-practices/",target:"_blank",rel:"nofollow noopener noreferrer"},"WordPress accessibility guidelines"),'. You must use the "Needs Accessibility Feedback" label and get a review from the accessibility team. It\'s best to request a review early (at the documentation stage) in order to ensure the component is designed inclusively from the outset.'),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Visual quality"),": Does the component apply visual style — color, typography, icons, space, borders, and more — using appropriate variables, and does it follow ",(0,esm.kt)("a",{parentName:"li",href:"https://make.wordpress.org/design/handbook/design-guide/",target:"_blank",rel:"nofollow noopener noreferrer"},"visual guidelines"),'? You must use the "Needs Design Feedback" label and get a review from the design team.'),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Documentation"),": Ensure that the component has proper documentation for development, design, and accessibility."),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Sufficient states & variations"),": Does it cover all the necessary variations (primary, secondary, dense, etc.) and states (default, hover, active, disabled, loading, etc.), within the intended scope?"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Functionality"),": Do all behaviors function as expected?"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Responsiveness"),": Does it incorporate responsive behaviors as needed? Is the component designed from a mobile-first perspective? Do all touch interactions work as expected?"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Content resilience"),": Is each dynamic word or image element resilient to too much, too little, and no content at all, respectively? How long can labels be, and what happens when you run out of space?"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Composability"),": Does it fit well when placed next to or layered with other components to form a larger composition?"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("strong",{parentName:"li"},"Browser support"),": Has the component visual quality and accuracy been checked across Safari, Chrome, Firefox, IE, etc? Please adhere to our ",(0,esm.kt)("a",{parentName:"li",href:"https://github.com/WordPress/gutenberg/blob/HEAD/packages/browserslist-config/index.js",target:"_blank",rel:"nofollow noopener noreferrer"},"browser support requirements"),".")),(0,esm.kt)("h2",{id:"compatibility"},"Compatibility"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"@wordpress/components")," package includes components that are relied upon by many developers across different projects. It is, therefore, very important to avoid introducing breaking changes."),(0,esm.kt)("p",null,'In these situations, one possible approach is to "soft-deprecate" a given legacy API. This is achieved by:'),(0,esm.kt)("ol",null,(0,esm.kt)("li",{parentName:"ol"},"Removing traces of the API from the docs, while still supporting it in code."),(0,esm.kt)("li",{parentName:"ol"},"Updating all places in Gutenberg that use that API."),(0,esm.kt)("li",{parentName:"ol"},"Adding deprecation warnings (only after the previous point is completed, otherwise the Browser Console will be polluted by all those warnings and some e2e tests may fail).")),(0,esm.kt)("p",null,"When adding new components or new props to existing components, it's recommended to prefix them with ",(0,esm.kt)("inlineCode",{parentName:"p"},"__unstable")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"__experimental")," until they're stable enough to be exposed as part of the public API."),(0,esm.kt)("h3",{id:"learn-more"},"Learn more"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"/docs/contributors/code/backward-compatibility.md#how-to-preserve-backward-compatibility-for-a-react-component"},"How to preserve backward compatibility for a React Component")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"/docs/contributors/code/coding-guidelines.md#experimental-and-unstable-apis"},"Experimental and Unstable APIs")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#deprecating-styles"},"Deprecating styles"))),(0,esm.kt)("h2",{id:"compound-components"},"Compound components"),(0,esm.kt)("p",null,"When creating components that render a list of subcomponents, prefer to expose the API using the ",(0,esm.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/compound-components-with-react-hooks",target:"_blank",rel:"nofollow noopener noreferrer"},"Compound Components")," technique over array props like ",(0,esm.kt)("inlineCode",{parentName:"p"},"items")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"options"),":"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},"// ❌ Don't:\n<List\n    items={ [\n        { value: 'Item 1' },\n        { value: 'Item 2' },\n        { value: 'Item 3' },\n    ] }\n/>\n")),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},'// ✅ Do:\n<List>\n    <ListItem value="Item 1" />\n    <ListItem value="Item 2" />\n    <ListItem value="Item 3" />\n</List>\n')),(0,esm.kt)("p",null,"When implementing this pattern, avoid using ",(0,esm.kt)("inlineCode",{parentName:"p"},"React.Children.map")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"React.cloneElement")," to map through the children and augment them. Instead, use React Context to provide state to subcomponents and connect them:"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},"// ❌ Don't:\nfunction List ( props ) {\n    const [ state, setState ] = useState();\n    return (\n        <div { ...props }>\n            { Children.map( props.children, ( child ) => cloneElement( child, { state } ) ) ) }\n        </div>\n    );\n}\n")),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},"// ✅ Do:\nconst ListContext = createContext();\n\nfunction List( props ) {\n    const [ state, setState ] = useState();\n    return (\n        <ListContext.Provider value={ state }>\n            <div { ...props } />\n        </ListContext.Provider>\n    );\n}\n\nfunction ListItem( props ) {\n    const state = useContext( ListContext );\n    ...\n}\n")),(0,esm.kt)("h2",{id:"components--hooks"},"Components & Hooks"),(0,esm.kt)("p",null,"One way to enable reusability and composition is to extract a component's underlying logic into a hook (living in a separate ",(0,esm.kt)("inlineCode",{parentName:"p"},"hook.ts")," file). The actual component (usually defined in a ",(0,esm.kt)("inlineCode",{parentName:"p"},"component.tsx")," file) can then invoke the hook and use its output to render the required DOM elements. For example:"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-tsx"},"// in `hook.ts`\nfunction useExampleComponent( props: PolymorphicComponentProps< ExampleProps, 'div' > ) {\n    // Merge received props with the context system.\n    const { isVisible, className, ...otherProps } = useContextSystem( props, 'Example' );\n\n    // Any other reusable rendering logic (e.g. computing className, state, event listeners...)\n    const cx = useCx();\n    const classes = useMemo(\n        () =>\n            cx(\n                styles.example,\n                isVisible && styles.visible,\n                className\n            ),\n        [ className, isVisible ]\n    );\n\n    return {\n        ...otherProps,\n        className: classes\n    };\n}\n\n// in `component.tsx`\nfunction Example(\n    props: PolymorphicComponentProps< ExampleProps, 'div' >,\n    forwardedRef: React.ForwardedRef< any >\n) {\n    const exampleProps = useExampleComponent( props );\n\n    return <View { ...spacerProps } ref={ forwardedRef } />;\n}\n")),(0,esm.kt)("p",null,"A couple of good examples of how hooks are used for composition are:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"the ",(0,esm.kt)("inlineCode",{parentName:"li"},"Card")," component, which builds on top of the ",(0,esm.kt)("inlineCode",{parentName:"li"},"Surface")," component by ",(0,esm.kt)("a",{parentName:"li",href:"/packages/components/src/card/card/hook.ts"},"calling the ",(0,esm.kt)("inlineCode",{parentName:"a"},"useSurface")," hook inside its own hook"),";"),(0,esm.kt)("li",{parentName:"ul"},"the ",(0,esm.kt)("inlineCode",{parentName:"li"},"HStack")," component, which builds on top of the ",(0,esm.kt)("inlineCode",{parentName:"li"},"Flex")," component and ",(0,esm.kt)("a",{parentName:"li",href:"/packages/components/src/h-stack/hook.tsx"},"calls the ",(0,esm.kt)("inlineCode",{parentName:"a"},"useFlex")," hook inside its own hook"),".")),(0,esm.kt)("h2",{id:"typescript"},"TypeScript"),(0,esm.kt)("p",null,"We strongly encourage using TypeScript for all new components. Components should be typed using the ",(0,esm.kt)("inlineCode",{parentName:"p"},"WordPressComponent")," type."),(0,esm.kt)("h2",{id:"styling"},"Styling"),(0,esm.kt)("p",null,"All new component should be styled using ",(0,esm.kt)("a",{parentName:"p",href:"https://emotion.sh/docs/introduction",target:"_blank",rel:"nofollow noopener noreferrer"},"Emotion"),"."),(0,esm.kt)("p",null,"Note: Instead of using Emotion's standard ",(0,esm.kt)("inlineCode",{parentName:"p"},"cx")," function, the custom ",(0,esm.kt)("a",{parentName:"p",href:"/packages/components/src/utils/hooks/use-cx.ts"},(0,esm.kt)("inlineCode",{parentName:"a"},"useCx")," hook")," should be used instead."),(0,esm.kt)("h3",{id:"deprecating-styles"},"Deprecating styles"),(0,esm.kt)("p",null,"Changing the styles of a non-experimental component must be done with care. To prevent serious breakage in third-party usage, in some cases we may want a grace period before fully removing the old styles. This can be done by temporarily placing the new styles behind a feature flag prop prefixed by ",(0,esm.kt)("inlineCode",{parentName:"p"},"__next"),", accompanied by a ",(0,esm.kt)("inlineCode",{parentName:"p"},"deprecate()")," warning in the console. The feature flag should be opt-in (false by default), and have a reasonably descriptive name (",(0,esm.kt)("strong",{parentName:"p"},"not")," ",(0,esm.kt)("inlineCode",{parentName:"p"},"__nextHasNewStyles"),"). A descriptive name allows for multiple deprecations to proceed in parallel, separated by concerns or by deprecation version."),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},"// component.tsx\nimport deprecated from '@wordpress/deprecated';\nimport { Wrapper } from './styles.ts';\n\nfunction MyComponent({ __nextHasNoOuterMargins = false }) {\n    if ( ! __nextHasNoOuterMargins ) {\n        deprecated( 'Outer margin styles for wp.components.MyComponent', {\n            since: '6.0',\n            version: '6.2', // Set a reasonable grace period depending on impact\n            hint:\n                'Set the `__nextHasNoOuterMargins` prop to true to start opting into the new styles, which will become the default in a future version.',\n        } );\n    }\n    return <Wrapper __nextHasNoOuterMargins={__nextHasNoOuterMargins} />\n}\n")),(0,esm.kt)("p",null,"Styles should be structured so the deprecated styles are cleanly encapsulated, and can be easily removed when the deprecation version arrives."),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-js"},"// styles.ts\nconst deprecatedMargins = ({ __nextHasNoOuterMargins }) => {\n    if ( ! __nextHasNoOuterMargins ) {\n        return css`\n            margin: 8px;\n        `;\n    }\n};\n\nexport const Wrapper = styled.div`\n    margin: 0;\n\n    ${deprecatedMargins}\n`;\n")),(0,esm.kt)("p",null,"Once deprecated, code examples in docs/stories should include the opt-in prop set to ",(0,esm.kt)("inlineCode",{parentName:"p"},"true")," so that new consumers are encouraged to adopt it from the start."),(0,esm.kt)("p",null,"Remember to ",(0,esm.kt)("a",{parentName:"p",href:"/docs/contributors/code/backward-compatibility.md##dev-notes"},"add a ",(0,esm.kt)("strong",{parentName:"a"},"Needs Dev Note")," label")," to the pull request so third-party developers can be informed of the deprecation."),(0,esm.kt)("p",null,"When the grace period is over and the deprecation version arrives, the ",(0,esm.kt)("inlineCode",{parentName:"p"},"__next*")," prop, deprecation notice, and deprecated styles should all be completely removed from the codebase."),(0,esm.kt)("h4",{id:"criteria-for-putting-styles-changes-behind-a-feature-flag"},"Criteria for putting styles changes behind a feature flag"),(0,esm.kt)("p",null,"Not all style changes justify a formal deprecation process. The main thing to look for is whether the changes could cause layouts to break in an obvious or harmful way, given that the component is being used in a standard fashion."),(0,esm.kt)("h5",{id:"does-need-formal-deprecation"},"DOES need formal deprecation"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Removing an outer margin."),(0,esm.kt)("li",{parentName:"ul"},"Substantial changes to width/height, such as adding or removing a size restriction.")),(0,esm.kt)("h5",{id:"does-not-need-formal-deprecation"},"DOES NOT need formal deprecation"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Breakage only occurs in non-standard usage, such as when the consumer is overriding component internals."),(0,esm.kt)("li",{parentName:"ul"},"Minor layout shifts of a few pixels."),(0,esm.kt)("li",{parentName:"ul"},"Internal layout changes of a higher-level component.")),(0,esm.kt)("h2",{id:"context-system"},"Context system"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"@wordpress/components")," context system is based on ",(0,esm.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html",target:"_blank",rel:"nofollow noopener noreferrer"},"React's ",(0,esm.kt)("inlineCode",{parentName:"a"},"Context")," API"),', and is a way for components to adapt to the "context" they\'re being rendered in.'),(0,esm.kt)("p",null,"Components can use this system via a couple of functions:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"they can provide values using a shared ",(0,esm.kt)("inlineCode",{parentName:"li"},"ContextSystemProvider")," component"),(0,esm.kt)("li",{parentName:"ul"},"they can connect to the Context via ",(0,esm.kt)("inlineCode",{parentName:"li"},"contextConnect")),(0,esm.kt)("li",{parentName:"ul"},'they can read the "computed" values from the context via ',(0,esm.kt)("inlineCode",{parentName:"li"},"useContextSystem"))),(0,esm.kt)("p",null,"An example of how this is used can be found in the ",(0,esm.kt)("a",{parentName:"p",href:"/packages/components/src/card"},(0,esm.kt)("inlineCode",{parentName:"a"},"Card")," component family"),". For example, this is how the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Card")," component injects the ",(0,esm.kt)("inlineCode",{parentName:"p"},"size")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"isBorderless")," props down to its ",(0,esm.kt)("inlineCode",{parentName:"p"},"CardBody"),' subcomponent — which makes it use the correct spacing and border settings "auto-magically".'),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},"//=========================================================================\n// Simplified snippet from `packages/components/src/card/card/hook.ts`\n//=========================================================================\nimport { useContextSystem } from '../../ui/context';\n\nexport function useCard( props ) {\n    // Read any derived registered prop from the Context System in the `Card` namespace\n    const derivedProps = useContextSystem( props, 'Card' );\n\n    // [...]\n\n    return computedHookProps;\n}\n\n//=========================================================================\n// Simplified snippet from `packages/components/src/card/card/component.ts`\n//=========================================================================\nimport { contextConnect, ContextSystemProvider } from '../../ui/context';\n\nfunction Card( props, forwardedRef ) {\n    const {\n        size,\n        isBorderless,\n        ...otherComputedHookProps\n    } = useCard( props );\n\n    // [...]\n\n    // Prepare the additional props that should be passed to subcomponents via the Context System.\n    const contextProviderValue = useMemo( () => {\n        return {\n            // Each key in this object should match a component's registered namespace.\n            CardBody: {\n                size,\n                isBorderless,\n            },\n        };\n    }, [ isBorderless, size ] );\n\n    return (\n        /* Write additional values to the Context System */\n        <ContextSystemProvider value={ contextProviderValue }>\n            { /* [...] */ }\n        </ContextSystemProvider>\n    );\n}\n\n// Connect to the Context System under the `Card` namespace\nconst ConnectedCard = contextConnect( Card, 'Card' );\nexport default ConnectedCard;\n\n//=========================================================================\n// Simplified snippet from `packages/components/src/card/card-body/hook.ts`\n//=========================================================================\nimport { useContextSystem } from '../../ui/context';\n\nexport function useCardBody( props ) {\n    // Read any derived registered prop from the Context System in the `CardBody` namespace.\n    // If a `CardBody` component is rendered as a child of a `Card` component, the value of\n    // the `size` prop will be the one set by the parent `Card` component via the Context\n    // System (unless the prop gets explicitely set on the `CardBody` component).\n    const { size = 'medium', ...otherDerivedProps } = useContextSystem( props, 'CardBody' );\n\n    // [...]\n\n    return computedHookProps;\n}\n")),(0,esm.kt)("h2",{id:"unit-tests"},"Unit tests"),(0,esm.kt)("p",null,"Please refer to the ",(0,esm.kt)("a",{parentName:"p",href:"/docs/contributors/code/testing-overview.md#snapshot-testing"},"JavaScript Testing Overview docs"),"."),(0,esm.kt)("h2",{id:"storybook"},"Storybook"),(0,esm.kt)("p",null,"All new components should add stories to the project's ",(0,esm.kt)("a",{parentName:"p",href:"https://storybook.js.org/",target:"_blank",rel:"nofollow noopener noreferrer"},"Storybook"),". Each ",(0,esm.kt)("a",{parentName:"p",href:"https://storybook.js.org/docs/react/get-started/whats-a-story",target:"_blank",rel:"nofollow noopener noreferrer"},"story")," captures the rendered state of a UI component in isolation. This greatly simplifies working on a given component, while also serving as an interactive form of documentation."),(0,esm.kt)("p",null,"A component's story should be showcasing its different states — for example, the different variants of a  ",(0,esm.kt)("inlineCode",{parentName:"p"},"Button"),":"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},"import Button from '../';\n\nexport default { title: 'Components/Button', component: Button };\n\nconst Template = ( args ) => <Button { ...args } />;\n\nexport const Default = Template.bind( {} );\nDefault.args = {\n    text: 'Default Button',\n    isBusy: false,\n    isSmall: false,\n};\n\nexport const Primary = Template.bind( {} );\nPrimary.args = {\n    ...Default.args,\n    text: 'Primary Button',\n    variant: 'primary',\n};\n")),(0,esm.kt)("p",null,"A great tool to use when writing stories is the ",(0,esm.kt)("a",{parentName:"p",href:"https://storybook.js.org/addons/@storybook/addon-controls",target:"_blank",rel:"nofollow noopener noreferrer"},"Storybook Controls addon"),". Ideally props should be exposed by using this addon, which provides a graphical UI to interact dynamically with the component without needing to write code. Historically, we used ",(0,esm.kt)("a",{parentName:"p",href:"https://storybook.js.org/addons/@storybook/addon-knobs",target:"_blank",rel:"nofollow noopener noreferrer"},"Knobs"),", but it was deprecated and later removed in ",(0,esm.kt)("a",{parentName:"p",href:"https://github.com/WordPress/gutenberg/pull/47152",target:"_blank",rel:"nofollow noopener noreferrer"},"#47152"),"."),(0,esm.kt)("p",null,"The default value of each control should coincide with the default value of the props (i.e. it should be ",(0,esm.kt)("inlineCode",{parentName:"p"},"undefined")," if a prop is not required). A story should, therefore, also explicitly show how values from the Context System are applied to (sub)components. A good example of how this may look like is the ",(0,esm.kt)("a",{parentName:"p",href:"https://wordpress.github.io/gutenberg/?path=/story/components-card--default",target:"_blank",rel:"nofollow noopener noreferrer"},(0,esm.kt)("inlineCode",{parentName:"a"},"Card")," story")," (code ",(0,esm.kt)("a",{parentName:"p",href:"/packages/components/src/card/stories/index.tsx"},"here"),")."),(0,esm.kt)("p",null,"Storybook can be started on a local machine by running ",(0,esm.kt)("inlineCode",{parentName:"p"},"npm run storybook:dev"),". Alternatively, the components' catalogue (up to date with the latest code on ",(0,esm.kt)("inlineCode",{parentName:"p"},"trunk"),") can be found at ",(0,esm.kt)("a",{parentName:"p",href:"https://wordpress.github.io/gutenberg/",target:"_blank",rel:"nofollow noopener noreferrer"},"wordpress.github.io/gutenberg/"),"."),(0,esm.kt)("h2",{id:"documentation"},"Documentation"),(0,esm.kt)("p",null,"All components, in addition to being typed, should be using JSDoc when necessary — as explained in the ",(0,esm.kt)("a",{parentName:"p",href:"/docs/contributors/code/coding-guidelines.md#javascript-documentation-using-jsdoc"},"Coding Guidelines"),"."),(0,esm.kt)("p",null,"Each component that is exported from the ",(0,esm.kt)("inlineCode",{parentName:"p"},"@wordpress/components")," package should include a ",(0,esm.kt)("inlineCode",{parentName:"p"},"README.md")," file, explaining how to use the component, showing examples, and documenting all the props."),(0,esm.kt)("h2",{id:"readme-example"},"README example"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-markdown"},'# `ComponentName`\n\n\x3c!-- If component is experimental, add the following section: --\x3e\n<div class="callout callout-alert">\nThis feature is still experimental. “Experimental” means this is an early implementation subject to drastic and breaking changes.\n</div>\n\n\x3c!-- If component is deprecated, add the following section: --\x3e\n<div class="callout callout-alert">\nThis component is deprecated. Please use `{other component}` from the `{other package}` package instead.\n</div>\n\nDescription of the component.\n\n## Usage\n\nCode example using correct markdown syntax and formatted using project\'s formatting rules. See [ItemGroup](/packages/components/src/item-group/item-group/README.md#usage) for a real-world example.\n\n```jsx\nimport { ExampleComponent } from \'@wordpress/components\';\n\nfunction Example() {\n    return (\n        <ExampleComponent>\n            <p>Code is poetry</p>\n        </ExampleComponent>\n    );\n}\n```\n\n## Props\n\nThe component accepts the following props:\n\n### `propName`: Typescript style type i.e `string`, `number`, `( nextValue: string ) => void`\n\nProp description. With a new line before and after the description and before and after type/required blocks.\n\n-   Required: Either `Yes` or `No`\n\x3c!-- If the prop has a default value, add the following line: --\x3e\n-   Default: [default value]\n\n### Inherited props\n\nAdd this section when there are props that are drilled down into an internal component. See [ClipboardButton](/packages/components/src/clipboard-button/README.md) for an example.\n\n\x3c!-- Only add the next section if the component relies on the [Context System](#context-system) --\x3e\n## Context\n\nSee examples for this section for the [ItemGroup](/packages/components/src/item-group/item-group/README.md#context) and [`Card`](/packages/components/src/card/card/README.md#context) components.\n')),(0,esm.kt)("h2",{id:"folder-structure"},"Folder structure"),(0,esm.kt)("p",null,"As a result of the above guidelines, all new components (except for shared utilities) should ",(0,esm.kt)("em",{parentName:"p"},"generally")," follow this folder structure:"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-text"},"component-name/\n├── stories\n│   └── index.js\n├── test\n│   └── index.js\n├── component.tsx\n├── context.ts\n├── hook.ts\n├── index.ts\n├── README.md\n├── styles.ts\n└── types.ts\n")),(0,esm.kt)("p",null,"In case of a family of components (e.g. ",(0,esm.kt)("inlineCode",{parentName:"p"},"Card")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"CardBody"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"CardFooter"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"CardHeader")," ...), each component's implementation should live in a separate subfolder, while code common to the whole family of components (e.g types, utils, context...) should live in the family of components root folder:"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-text"},"component-family-name/\n├── sub-component-name/\n│   ├── index.ts\n│   ├── component.tsx\n│   ├── hook.ts\n│   ├── README.md\n│   └── styles.ts\n├── sub-component-name/\n│   ├── index.ts\n│   ├── component.tsx\n│   ├── hook.ts\n│   ├── README.md\n│   └── styles.ts\n├── stories\n│   └── index.js\n├── test\n│   └── index.js\n├── context.ts\n├── index.ts\n├── types.ts\n└── utils.ts\n")),(0,esm.kt)("h2",{id:"refactoring-a-component-to-typescript"},"Refactoring a component to TypeScript"),(0,esm.kt)("p",null,(0,esm.kt)("em",{parentName:"p"},"Note: This section assumes that the local developer environment is set up correctly, including TypeScript linting. We also strongly recommend using an IDE that supports TypeScript.")),(0,esm.kt)("p",null,"Given a component folder (e.g. ",(0,esm.kt)("inlineCode",{parentName:"p"},"packages/components/src/unit-control"),"):"),(0,esm.kt)("ol",null,(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Remove the folder from the exclude list in ",(0,esm.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", if it isn’t already.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Remove any ",(0,esm.kt)("inlineCode",{parentName:"p"},"// @ts-nocheck")," comments in the folder, if any.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Rename ",(0,esm.kt)("inlineCode",{parentName:"p"},"*.js{x}")," files to ",(0,esm.kt)("inlineCode",{parentName:"p"},"*.ts{x}")," (except stories and unit tests).")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Run ",(0,esm.kt)("inlineCode",{parentName:"p"},"npm run dev")," and take note of all the errors (your IDE should also flag them).")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Since we want to focus on one component’s folder at the time, if any errors are coming from files outside of the folder that is being refactored, there are two potential approaches:"),(0,esm.kt)("ol",{parentName:"li"},(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Following those same guidelines, refactor those dependencies first."),(0,esm.kt)("ol",{parentName:"li"},(0,esm.kt)("li",{parentName:"ol"},"Ideally, start from the “leaf” of the dependency tree and slowly work your way up the chain."),(0,esm.kt)("li",{parentName:"ol"},"Resume work on this component once all dependencies have been refactored."))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Alternatively:"),(0,esm.kt)("ol",{parentName:"li"},(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"For each of those files, add ",(0,esm.kt)("inlineCode",{parentName:"p"},"// @ts-nocheck")," at the start of the file.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"If the components in the ignored files are destructuring props directly from the function's arguments, move the props destructuring to the function's body (this is to avoid TypeScript errors from trying to infer the props type):"),(0,esm.kt)("pre",{parentName:"li"},(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},"// Before:\nfunction MyComponent( { myProp1, myProp2, ...restProps } ) { /* ... */ }\n\n// After:\nfunction MyComponent( props ) {\n    const {  myProp1, myProp2, ...restProps } = props;\n\n    /* ... */\n}\n"))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Remove the folders from the exclude list in the ",(0,esm.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"If you’re still getting errors about a component’s props, the easiest way is to slightly refactor this component and perform the props destructuring inside the component’s body (as opposed as in the function signature) — this is to prevent TypeScript from inferring the types of these props.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Continue with the refactor of the current component (and take care of the refactor of the dependent components at a later stage).")))))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Create a new ",(0,esm.kt)("inlineCode",{parentName:"p"},"types.ts")," file.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Slowly work your way through fixing the TypeScript errors in the folder:"),(0,esm.kt)("ol",{parentName:"li"},(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Try to avoid introducing any runtime changes, if possible. The aim of this refactor is to simply rewrite the component to TypeScript.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Extract props to ",(0,esm.kt)("inlineCode",{parentName:"p"},"types.ts"),", and use them to type components. The README can be of help when determining a prop’s type.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Use existing HTML types when possible? (e.g. ",(0,esm.kt)("inlineCode",{parentName:"p"},"required")," for an input field?)")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"CSSProperties")," type where it makes sense.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Extend existing components’ props if possible, especially when a component internally forwards its props to another component in the package.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"If the component forwards its ",(0,esm.kt)("inlineCode",{parentName:"p"},"...restProps")," to an underlying element/component, you should use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"WordPressComponentProps")," type for the component's props:"),(0,esm.kt)("pre",{parentName:"li"},(0,esm.kt)("code",{parentName:"pre",className:"language-tsx"},"import type { WordPressComponentProps } from '../ui/context';\nimport type { ComponentOwnProps } from './types';\n\nfunction UnconnectedMyComponent(\n    // The resulting type will include:\n    // - all props defined in `ComponentOwnProps`\n    // - all HTML props/attributes from the component specified as the second\n    //   parameter (`div` in this example)\n    // - the special `as` prop (which marks the component as polymorphic),\n    //   unless the third parameter is `false`\n    props:  WordPressComponentProps< ComponentOwnProps, 'div', true >\n) { /* ... */ }\n"))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"As shown in the previous examples, make sure you have a ",(0,esm.kt)("strong",{parentName:"p"},"named")," export for the component, not just the default export (",(0,esm.kt)("a",{parentName:"p",href:"https://github.com/WordPress/gutenberg/blob/trunk/packages/components/src/divider/component.tsx",target:"_blank",rel:"nofollow noopener noreferrer"},"example"),"). This ensures that the docgen can properly extract the types data. The naming should be so that the connected/forwarded component has the plain component name (",(0,esm.kt)("inlineCode",{parentName:"p"},"MyComponent"),"), and the raw component is prefixed (",(0,esm.kt)("inlineCode",{parentName:"p"},"UnconnectedMyComponent")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"UnforwardedMyComponent"),"). This makes the component's ",(0,esm.kt)("inlineCode",{parentName:"p"},"displayName")," look nicer in React devtools and in the autogenerated Storybook code snippets."),(0,esm.kt)("pre",{parentName:"li"},(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},"function UnconnectedMyComponent() { /* ... */ }\n\n// 👇 Without this named export, the docgen will not work!\nexport const MyComponent = contextConnect( UnconnectedMyComponent, 'MyComponent' );\nexport default MyComponent;\n"))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Use JSDocs syntax for each TypeScript property that is part of the public API of a component. The docs used here should be aligned with the component’s README. Add ",(0,esm.kt)("inlineCode",{parentName:"p"},"@default")," values where appropriate.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Prefer ",(0,esm.kt)("inlineCode",{parentName:"p"},"unknown")," to ",(0,esm.kt)("inlineCode",{parentName:"p"},"any"),", and in general avoid it when possible.")))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"On the component's main named export, add a JSDoc comment that includes the main description and the example code snippet from the README (",(0,esm.kt)("a",{parentName:"p",href:"https://github.com/WordPress/gutenberg/blob/43d9c82922619c1d1ff6b454f86f75c3157d3de6/packages/components/src/date-time/date-time/index.tsx#L193-L217",target:"_blank",rel:"nofollow noopener noreferrer"},"example"),"). ",(0,esm.kt)("em",{parentName:"p"},"At the time of writing, the ",(0,esm.kt)("inlineCode",{parentName:"em"},"@example")," JSDoc keyword is not recognized by StoryBook's docgen, so please avoid using it"),".")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Make sure that:"),(0,esm.kt)("ol",{parentName:"li"},(0,esm.kt)("li",{parentName:"ol"},"tests still pass;"),(0,esm.kt)("li",{parentName:"ol"},"storybook examples work as expected."),(0,esm.kt)("li",{parentName:"ol"},"the component still works as expected in its usage in Gutenberg;"),(0,esm.kt)("li",{parentName:"ol"},"the JSDocs comments on ",(0,esm.kt)("inlineCode",{parentName:"li"},"types.ts")," and README docs are aligned."))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Convert Storybook examples to TypeScript (and from knobs to controls, if necessary) (",(0,esm.kt)("a",{parentName:"p",href:"https://github.com/WordPress/gutenberg/pull/39320",target:"_blank",rel:"nofollow noopener noreferrer"},"example"),")."),(0,esm.kt)("ol",{parentName:"li"},(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Update all consumers of the component to potentially extend the newly added types (e.g. make ",(0,esm.kt)("inlineCode",{parentName:"p"},"UnitControl")," props extend ",(0,esm.kt)("inlineCode",{parentName:"p"},"NumberControl")," props after ",(0,esm.kt)("inlineCode",{parentName:"p"},"NumberControl")," types are made available).")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Rename Story extension from ",(0,esm.kt)("inlineCode",{parentName:"p"},".js")," to ",(0,esm.kt)("inlineCode",{parentName:"p"},".tsx"),".")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Rewrite the ",(0,esm.kt)("inlineCode",{parentName:"p"},"meta")," story object, and export it as default. In particular, make sure you add the following settings under the ",(0,esm.kt)("inlineCode",{parentName:"p"},"parameters")," key:"),(0,esm.kt)("pre",{parentName:"li"},(0,esm.kt)("code",{parentName:"pre",className:"language-tsx"},"const meta: ComponentMeta< typeof MyComponent > = {\n    parameters: {\n        controls: { expanded: true },\n        docs: { source: { state: 'open' } },\n    },\n};\n")),(0,esm.kt)("p",{parentName:"li"},"These options will display prop descriptions in the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Canvas ▸ Controls")," tab, and expand code snippets in the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Docs")," tab.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Go to the component in Storybook and check the props table in the Docs tab. If there are props that shouldn't be there, check that your types are correct, or consider ",(0,esm.kt)("inlineCode",{parentName:"p"},"Omit"),"-ing props that shouldn't be exposed."),(0,esm.kt)("ol",{parentName:"li"},(0,esm.kt)("li",{parentName:"ol"},"Use the ",(0,esm.kt)("inlineCode",{parentName:"li"},"parameters.controls.exclude")," property on the ",(0,esm.kt)("inlineCode",{parentName:"li"},"meta")," object to hide props from the docs."),(0,esm.kt)("li",{parentName:"ol"},"Use the ",(0,esm.kt)("inlineCode",{parentName:"li"},"argTypes")," prop on the ",(0,esm.kt)("inlineCode",{parentName:"li"},"meta")," object to customize how each prop in the docs can be interactively controlled by the user (tip: use ",(0,esm.kt)("inlineCode",{parentName:"li"},"control: { type: null }")," to remove the interactive controls from a prop, without hiding the prop from the docs)."),(0,esm.kt)("li",{parentName:"ol"},"See the ",(0,esm.kt)("a",{parentName:"li",href:"https://storybook.js.org/docs/react/essentials/controls",target:"_blank",rel:"nofollow noopener noreferrer"},"official docs")," for more details."))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Comment out all existing stories.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Create a default template, where the component is being used in the most “vanilla” way possible.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Use the template for the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Default")," story, which will serve as an interactive doc playground.")),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Add more focused stories as you see fit. These non-default stories should illustrate specific scenarios and usages of the component. A developer looking at the Docs tab should be able to understand what each story is demonstrating. Add JSDoc comments to stories when necessary.")))),(0,esm.kt)("li",{parentName:"ol"},(0,esm.kt)("p",{parentName:"li"},"Convert unit tests."),(0,esm.kt)("ol",{parentName:"li"},(0,esm.kt)("li",{parentName:"ol"},"Rename test file extensions from ",(0,esm.kt)("inlineCode",{parentName:"li"},".js")," to ",(0,esm.kt)("inlineCode",{parentName:"li"},".tsx"),"."),(0,esm.kt)("li",{parentName:"ol"},"Fix all TypeScript errors.")))),(0,esm.kt)("h2",{id:"using-radix-ui-primitives"},"Using Radix UI primitives"),(0,esm.kt)("p",null,"Useful links:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"https://www.radix-ui.com/docs/primitives/overview/introduction",target:"_blank",rel:"nofollow noopener noreferrer"},"online docs")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"https://github.com/radix-ui/primitives",target:"_blank",rel:"nofollow noopener noreferrer"},"repo")," — useful for:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"inspecting source code"),(0,esm.kt)("li",{parentName:"ul"},"running storybook examples (",(0,esm.kt)("inlineCode",{parentName:"li"},"yarn install && yarn dev"),")")))))}function contributing_story_extends(){return contributing_story_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},contributing_story_extends.apply(this,arguments)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const contributing_story_layoutProps={};function contributing_story_MDXContent({components,...props}){return(0,esm.kt)("wrapper",contributing_story_extends({},contributing_story_layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.h_,{title:"Components/Contributing Guidelines",mdxType:"Meta"}),(0,esm.kt)(MDXContent,{mdxType:"Contributing"}))}contributing_story_MDXContent.displayName="MDXContent",contributing_story_MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Components/Contributing Guidelines",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(dist_esm.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,esm.kt)(contributing_story_MDXContent,null))};const contributing_story=componentMeta,__namedExportsOrder=["__page"]}}]);